# Проверка JWT токена
map $http_authorization $jwt_header {
    "~Bearer (.+)$" $1;
    default "";
}

# Маппинг эндпоинтов на роли
map $request_uri $required_role {
    # Админские эндпоинты
    "~^/api/v1/users/admin/users$"        "admin";
    "~^/api/v1/users/admin/users/\d+$"    "admin";
    
    # Защищенные эндпоинты (требуют авторизации)
    "~^/api/v1/users/me$"                 "any";
    "~^/api/v1/users/update_fullname$"    "any";
    "~^/api/v1/users/update_email$"       "any";
    "~^/api/v1/users/delete$"             "any";
    
    # Публичные эндпоинты
    "~^/api/v1/users/create$"             "public";
    "~^/api/v1/users/request-password-reset$" "public";
    "~^/api/v1/users/reset-password$"     "public";
    "~^/api/v1/users/verify-email$"       "public";
    "~^/api/v1/auth/"                     "public";
    
    default                               "any";
}

# Основной сервер
server {
    listen 80;
    server_name localhost;

    # Общие заголовки CORS
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

    # Обработка OPTIONS запросов
    location /api/v1/ {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        return 404;
    }

    # Auth Service - публичные эндпоинты
    location /api/v1/auth/ {
        proxy_pass http://auth_service:8080/api/v1/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Content-Type $http_content_type;
    }

    # Users Service - публичные эндпоинты
    location = /api/v1/users/create {
        limit_except POST {
            deny all;
        }
        
        proxy_pass http://users_api:8080/api/v1/users/create;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Content-Type 'application/json';
        proxy_set_header Content-Length $http_content_length;
        
        # Настройки для корректной обработки POST запросов
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        client_max_body_size 10m;
        proxy_request_buffering on;
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    location = /api/v1/users/request-password-reset {
        limit_except POST {
            deny all;
        }
        
        proxy_pass http://users_api:8080/api/v1/users/request-password-reset;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Content-Type 'application/json';
        proxy_set_header Content-Length $http_content_length;
        proxy_http_version 1.1;
        client_max_body_size 10m;
    }

    location = /api/v1/users/reset-password {
        limit_except POST {
            deny all;
        }
        
        proxy_pass http://users_api:8080/api/v1/users/reset-password;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Content-Type 'application/json';
        proxy_set_header Content-Length $http_content_length;
        proxy_http_version 1.1;
        client_max_body_size 10m;
    }

    location = /api/v1/users/verify-email {
        limit_except GET {
            deny all;
        }
        
        proxy_pass http://users_api:8080/api/v1/users/verify-email;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
    }

    # Users Service - защищенные эндпоинты для админа
    location = /api/v1/users/admin/users {
        auth_request /auth/validate;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_role $upstream_http_x_user_role;

        if ($user_role != "admin") {
            return 403 '{"error": "Admin role required"}';
        }

        proxy_pass http://users_api:8080/api/v1/users/admin/users;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-User-Email $user_email;
        proxy_set_header X-User-Role $user_role;
    }

    location ~ ^/api/v1/users/admin/users/(\d+)$ {
        auth_request /auth/validate;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_role $upstream_http_x_user_role;

        if ($user_role != "admin") {
            return 403 '{"error": "Admin role required"}';
        }

        proxy_pass http://users_api:8080/api/v1/users/admin/users/$1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-User-Email $user_email;
        proxy_set_header X-User-Role $user_role;
    }

    # Users Service - защищенные эндпоинты
    location = /api/v1/users/me {
        limit_except GET {
            deny all;
        }

        auth_request /auth/validate;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_role $upstream_http_x_user_role;

        proxy_pass http://users_api:8080/api/v1/users/me?email=$user_email;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-User-Role $user_role;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Content-Type "application/json";
        
        # Настройки для корректной обработки GET запросов
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    location = /api/v1/users/update_fullname {
        auth_request /auth/validate;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_role $upstream_http_x_user_role;

        proxy_pass http://users_api:8080/api/v1/users/update_fullname?email=$user_email;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-User-Role $user_role;
    }

    location = /api/v1/users/update_email {
        auth_request /auth/validate;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_role $upstream_http_x_user_role;

        proxy_pass http://users_api:8080/api/v1/users/update_email?email=$user_email;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-User-Role $user_role;
    }

    location = /api/v1/users/delete {
        auth_request /auth/validate;
        auth_request_set $user_email $upstream_http_x_user_email;
        auth_request_set $user_role $upstream_http_x_user_role;

        proxy_pass http://users_api:8080/api/v1/users/delete?email=$user_email;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-User-Role $user_role;
    }

    # Внутренний location для проверки JWT
    location = /auth/validate {
        internal;
        proxy_pass http://auth_service:8080/api/v1/auth/validate;
        proxy_method POST;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    # Health check
    location /health {
        access_log off;
        return 200 '{"status": "healthy"}';
    }

    error_page 401 = @error401;
    location @error401 {
        default_type application/json;
        return 401 '{"error": "Unauthorized"}';
    }

    error_page 403 = @error403;
    location @error403 {
        default_type application/json;
        return 403 '{"error": "Forbidden"}';
    }

    error_page 404 = @error404;
    location @error404 {
        default_type application/json;
        return 404 '{"error": "Not Found"}';
    }
} 