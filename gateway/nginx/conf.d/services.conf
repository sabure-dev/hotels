# Проверка JWT токена
map $http_authorization $jwt_header {
    "~Bearer (.+)$" $1;
    default "";
}

# Маппинг эндпоинтов на роли
map $request_uri $required_role {
    # Админские эндпоинты
    "~^/api/v1/users/list"        "admin";
    "~^/api/v1/users/\d+"         "admin";
    "~^/api/v1/users/health/db"   "admin";
    
    # Пользовательские эндпоинты
    "~^/api/v1/users/me"          "any";
    "~^/api/v1/users/profile"     "any";
    
    # Публичные эндпоинты
    "~^/api/v1/users/register"    "public";
    "~^/api/v1/users/reset-password" "public";
    "~^/api/v1/users/verify-email"   "public";
    "~^/api/v1/auth/"            "public";
    
    # По умолчанию требуем авторизацию
    default                      "any";
}

# Основной сервер
server {
    listen 80;
    server_name localhost;

    # Общие заголовки CORS
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

    # Обработка OPTIONS запросов для CORS
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # Auth Service
    location /api/v1/auth/ {
        proxy_pass http://auth_service:8000/api/v1/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Users Service
    location /api/v1/users/ {
        # Проверяем необходимость авторизации
        if ($required_role != "public") {
            set $auth_header $http_authorization;
            if ($auth_header = "") {
                return 401 '{"error": "No authorization token provided"}';
            }

            # Проверяем JWT через auth сервис
            auth_request /auth/validate;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;

            # Проверяем роли
            if ($required_role = "admin") {
                if ($user_role != "admin") {
                    return 403 '{"error": "Admin role required"}';
                }
            }
        }

        # Передаем информацию о пользователе в users сервис
        proxy_set_header X-User-Email $user_email;
        proxy_set_header X-User-Role $user_role;

        proxy_pass http://users_service:8080/api/v1/users/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Внутренний location для проверки JWT
    location = /auth/validate {
        internal;
        proxy_pass http://auth_service:8000/api/v1/auth/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    # Health check
    location /health {
        access_log off;
        return 200 '{"status": "healthy"}';
    }

    # Обработка ошибок
    error_page 401 = @401;
    location @401 {
        default_type application/json;
        return 401 '{"error": "Unauthorized"}';
    }

    error_page 403 = @403;
    location @403 {
        default_type application/json;
        return 403 '{"error": "Forbidden"}';
    }

    error_page 404 = @404;
    location @404 {
        default_type application/json;
        return 404 '{"error": "Not Found"}';
    }
} 